<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mickael Asghar</title>
    <link>https://Mik3asg.github.io/</link>
    <description>Recent content on Mickael Asghar</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 10 Sep 2024 16:44:01 +0100</lastBuildDate><atom:link href="https://Mik3asg.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Dealing with False Ping Alerts in LogicMonitor: Building a Fallback Ping Monitoring Script</title>
      <link>https://Mik3asg.github.io/posts/implementating-backup-ping-monitoring-solution/</link>
      <pubDate>Tue, 10 Sep 2024 16:44:01 +0100</pubDate>
      
      <guid>https://Mik3asg.github.io/posts/implementating-backup-ping-monitoring-solution/</guid>
      <description>Problem Statement On Friday, September 6th at 21:31, we received an alert from LogicMonitor indicating one of our production web app servers (Tomcat#3) was down. Upon investigation via SSH, I confirmed the server was operational, suggesting the issue was with the monitoring system rather than the VM.
Analysis A ticket was raised with our IT service provider, who manages our cloud workloads and VMs. Their investigation revealed:
 Ping data stopped at 16:09 the same day.</description>
    </item>
    
    <item>
      <title>Kubernetes - Zero Downtime Deployments: Blue/Green Strategy</title>
      <link>https://Mik3asg.github.io/posts/k8s-zero-downtime-deployments-blue-green-strategy/</link>
      <pubDate>Mon, 09 Sep 2024 16:49:36 +0100</pubDate>
      
      <guid>https://Mik3asg.github.io/posts/k8s-zero-downtime-deployments-blue-green-strategy/</guid>
      <description>Overview In this guide, I&amp;rsquo;ll demonstrate a blue-green deployment strategy in Kubernetes using Deployments and Services. The goal is to achieve zero downtime by running two sets of pods: the current version (v1.0, blue) and the new version (v2.0, green). I&amp;rsquo;ll also explain how to roll back from green to blue if necessary.
Setup the Blue Environment The blue-deployment.yaml defines the current environment running version 1.0 of the app.
apiVersion: apps/v1 kind: Deployment metadata: name: blue-deploy labels: app: my-node-app env: blue version: v1.</description>
    </item>
    
    <item>
      <title>LogicMonitor: Understanding Why CPUBusyPercent Alert Was Not Triggered</title>
      <link>https://Mik3asg.github.io/posts/logicmonior-cpubusypercent-alert/</link>
      <pubDate>Fri, 23 Aug 2024 22:05:29 +0100</pubDate>
      
      <guid>https://Mik3asg.github.io/posts/logicmonior-cpubusypercent-alert/</guid>
      <description>Problem Statement: On 15th August 2024, an incident occurred where the CPUBusyPercent alert did not trigger for one of our Production MySQL Database VMs (DB01), despite the CPU being at 100% for seven minutes. This was unexpected since the threshold settings in LogicMonitor were supposed to trigger alerts under such conditions.
Figure 1: CPU usage plateau at 100% for 6 minutes without triggering an alert.
Analysis: The initial investigation revealed that the CPUBusyPercent alert settings were configured to trigger an alert after five consecutive polls (which equates to 6 minutes of sustained high CPU usage).</description>
    </item>
    
    <item>
      <title>Logrotate Configuration Setup in AlmaLinux 8.9</title>
      <link>https://Mik3asg.github.io/posts/logrotate-configuration-setup/</link>
      <pubDate>Tue, 20 Aug 2024 13:49:28 +0100</pubDate>
      
      <guid>https://Mik3asg.github.io/posts/logrotate-configuration-setup/</guid>
      <description>Introduction Before diving into the details, I want to share an overview of a recent log rotation project I worked on. Below is a breakdown of the tasks, challenges, and solutions, all while protecting confidential data. By implementing these solutions, we reduced log file disk usage from 6GB to 2GBâ€”a 66.7% reduction.
Logrotate helps manage log files by automatically rotating, compressing, and removing them when they become too large or outdated, preventing excessive disk space usage and ensuring system stability.</description>
    </item>
    
    <item>
      <title>Flask App deployment into Amazon EKS, using CICD Pipeline with Jenkins and Argo CD</title>
      <link>https://Mik3asg.github.io/posts/flask-app-jenkins-cicd-argocd-k8s/</link>
      <pubDate>Mon, 26 Feb 2024 21:00:49 +0000</pubDate>
      
      <guid>https://Mik3asg.github.io/posts/flask-app-jenkins-cicd-argocd-k8s/</guid>
      <description>Overview This project showcases an end-to-end DevOps pipeline for deploying a basic Flask application using Jenkins Pipeline and GitOps (with ArgoCD) on an Amazon Elastic Kubernetes Service (EKS) cluster. It utilises two Git repositories:
 GitHub Repository for Continous Integration hosting our basic Flask application code GitHub Repository for GitOps and Update of K8s Manifest  Pre-requisites/Assumptions:  AWS Account created AWS CLI installed on local machine IAM user set up with AWS access key ID and AWS secret access key kubectl installed on local machine DockerHub Account created Application code hosted on GIT Repository  Architecture/Design Overview Installation and Setup 1.</description>
    </item>
    
    <item>
      <title> Building a simple REST API in Golang with MUX, PostgreSQL and Docker</title>
      <link>https://Mik3asg.github.io/posts/rest-api-golang-docker-postgresql/</link>
      <pubDate>Fri, 09 Feb 2024 00:17:09 +0000</pubDate>
      
      <guid>https://Mik3asg.github.io/posts/rest-api-golang-docker-postgresql/</guid>
      <description>Overview This project demonstrates building a basic REST API in Golang, implementing CRUD operations with a PostgreSQL database for data persistence. The application utilises Gorilla Mux for routing, PostgreSQL for the database, and Docker for containerisation.
The API manages user information, including name, email, and city.
Note: As of now, this demo does not include an user interface as it has not been built for the purpose of this demo. The code for this demo is available on GitHub.</description>
    </item>
    
  </channel>
</rss>
